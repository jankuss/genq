# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
    tags:
      - "*"
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  check-formatting:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./tool
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'
    - name: Check formatting
      run: ./check_formatting.sh
  test:
    defaults:
      run:
        working-directory: ./tool
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Set up Dart
      uses: dart-lang/setup-dart@v1

    - name: pub get on fixtures
      run: (cd ./generation_test/fixtures && dart pub get)

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test $(go list ./... | grep -v /int_test)
  test-generated:
    needs: [goreleaser]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        channel: [stable, master]
    defaults:
      run:
        working-directory: ./packages/genq_test
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'
    - uses: subosito/flutter-action@v2
      with:
        channel: ${{ matrix.channel }}
    - name: pub get
      run: dart pub get
    - uses: actions/download-artifact@master
      with:
        name: dist
        path: ./packages/genq_test/dist
    - name: chmod
      run: chmod +x $(pwd)/dist/genq_linux_amd64_v1/genq
    - name: run_tests.sh
      run: GENQ_PATH=$(pwd)/dist/genq_linux_amd64_v1/genq ./run_tests.sh
  run-example:
    needs: [goreleaser]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./examples/json
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'
    - name: Set up Dart
      uses: dart-lang/setup-dart@v1
    - name: pub get
      run: dart pub get
    - uses: actions/download-artifact@master
      with:
        name: dist
        path: ./examples/json/dist
    - name: chmod
      run: chmod +x $(pwd)/dist/genq_linux_amd64_v1/genq
    - name: Generate
      run: GENQ_PATH=$(pwd)/dist/genq_linux_amd64_v1/genq ./generate.sh
    - name: Analyze
      run: dart analyze
    - name: Run example
      run: dart ./bin/json.dart
  run-int-test:
    needs: [goreleaser]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'
    - uses: actions/download-artifact@master
      with:
        name: dist
        path: ./dist
    - name: chmod
      run: chmod +x $(pwd)/dist/genq_linux_amd64_v1/genq
    - name: Run integration test
      run: GENQ_PATH=$(pwd)/dist/genq_linux_amd64_v1/genq ./scripts/run_int_tests.sh
  build:
    runs-on: ubuntu-latest
    needs: [test, check-formatting]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
      # More assembly might be required: Docker logins, GPG, etc.
      # It all depends on your needs.
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          # either 'goreleaser' (default) or 'goreleaser-pro'
          distribution: goreleaser
          version: latest
          args: build --clean --snapshot
          workdir: ./tool
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_BREW: ${{ secrets.GH_BREW }}
      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: |
            ./tool/dist
  goreleaser-deploy:
    needs: [build, test, check-formatting, run-example, run-int-test, test-generated]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
          workdir: ./tool
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_BREW: ${{ secrets.GH_BREW }}
